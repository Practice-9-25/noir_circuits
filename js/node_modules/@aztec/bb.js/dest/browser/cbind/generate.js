/**
 * Generate TypeScript bindings from msgpack schema
 */
import { writeFileSync, mkdirSync } from 'fs';
import { dirname, join } from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
import { fileURLToPath } from 'url';
import { createSharedTypesCompiler, createSyncApiCompiler, createAsyncApiCompiler, createNativeApiCompiler, } from './schema_compiler.js';
const execAsync = promisify(exec);
const GENERATORS = [
    {
        name: 'Shared types',
        outputFile: 'generated/api_types.ts',
        createCompiler: createSharedTypesCompiler,
    },
    {
        name: 'Sync API',
        outputFile: 'generated/sync.ts',
        createCompiler: createSyncApiCompiler,
    },
    {
        name: 'Async API',
        outputFile: 'generated/async.ts',
        createCompiler: createAsyncApiCompiler,
    },
    {
        name: 'Native API',
        outputFile: 'generated/native.ts',
        createCompiler: createNativeApiCompiler,
    },
];
// @ts-ignore
const __dirname = dirname(fileURLToPath(import.meta.url));
async function generate() {
    const bbBuildPath = process.env.BB_BINARY_PATH || join(__dirname, '../../../cpp/build/bin/bb');
    // Get schema from bb
    console.log('Fetching msgpack schema from bb...');
    const { stdout } = await execAsync(`${bbBuildPath} msgpack schema`);
    const schema = JSON.parse(stdout.trim());
    if (!schema.commands || !schema.responses) {
        throw new Error('Invalid schema: missing commands or responses');
    }
    console.log('Generating TypeScript bindings...\n');
    // Ensure output directory exists
    const outputDir = join(__dirname, 'generated');
    mkdirSync(outputDir, { recursive: true });
    // Generate each output file
    for (const config of GENERATORS) {
        const compiler = config.createCompiler();
        compiler.processApiSchema(schema.commands, schema.responses);
        const outputPath = join(__dirname, config.outputFile);
        const content = compiler.compile();
        writeFileSync(outputPath, content);
        console.log(`âœ“ ${config.name}: ${outputPath}`);
    }
    console.log('\nGeneration complete!');
}
// Run the generator
generate().catch(error => {
    console.error('Generation failed:', error);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2JpbmQvZ2VuZXJhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLElBQUksQ0FBQztBQUM5QyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUNwQyxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHFCQUFxQixFQUNyQixzQkFBc0IsRUFDdEIsdUJBQXVCLEdBRXhCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBUWxDLE1BQU0sVUFBVSxHQUFzQjtJQUNwQztRQUNFLElBQUksRUFBRSxjQUFjO1FBQ3BCLFVBQVUsRUFBRSx3QkFBd0I7UUFDcEMsY0FBYyxFQUFFLHlCQUF5QjtLQUMxQztJQUNEO1FBQ0UsSUFBSSxFQUFFLFVBQVU7UUFDaEIsVUFBVSxFQUFFLG1CQUFtQjtRQUMvQixjQUFjLEVBQUUscUJBQXFCO0tBQ3RDO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsV0FBVztRQUNqQixVQUFVLEVBQUUsb0JBQW9CO1FBQ2hDLGNBQWMsRUFBRSxzQkFBc0I7S0FDdkM7SUFDRDtRQUNFLElBQUksRUFBRSxZQUFZO1FBQ2xCLFVBQVUsRUFBRSxxQkFBcUI7UUFDakMsY0FBYyxFQUFFLHVCQUF1QjtLQUN4QztDQUNGLENBQUM7QUFFRixhQUFhO0FBQ2IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFMUQsS0FBSyxVQUFVLFFBQVE7SUFDckIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBRS9GLHFCQUFxQjtJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFFbkQsaUNBQWlDO0lBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDL0MsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTFDLDRCQUE0QjtJQUM1QixLQUFLLE1BQU0sTUFBTSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN6QyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFN0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLGFBQWEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxvQkFBb0I7QUFDcEIsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FBQyJ9