/**
 * Unified schema compiler with integrated strategies
 */
export type Schema = string | ObjectSchema | ['tuple', Schema[]] | ['map', [Schema, Schema]] | ['optional', [Schema]] | ['vector', [Schema]] | ['variant', Schema[]] | ['named_union', Array<[string, Schema]>] | ['shared_ptr', [Schema]] | ['array', [Schema, number]] | ['alias', [string, string]];
export type ObjectSchema = {
    [key: string]: Schema;
};
export interface TypeInfo {
    typeName: string;
    msgpackTypeName?: string;
    declaration?: string;
    toMethod?: string;
    fromMethod?: string;
}
export interface FunctionMetadata {
    name: string;
    commandType: string;
    responseType: string;
}
export interface CompilerConfig {
    mode: 'types' | 'sync' | 'async' | 'native';
    imports?: string[];
    wasmImport?: string;
}
export declare class SchemaCompiler {
    private config;
    private typeCache;
    private functionMetadata;
    private referencedTypes;
    constructor(config: CompilerConfig);
    /**
     * Process API schema and extract function metadata
     */
    processApiSchema(commandsSchema: Schema, responsesSchema: Schema): void;
    /**
     * Process a schema and populate type cache
     */
    processSchema(schema: Schema): TypeInfo;
    /**
     * Generate the complete output
     */
    compile(): string;
    private getSchemaKey;
    private needsTupleHelper;
    private trackTypeUsage;
    private extractBaseTypes;
    private generateTypeInfo;
    private processArraySchema;
    private processPrimitiveSchema;
    private processObjectSchema;
    private getOrCreateEmptyType;
    private generateInterfaces;
    private generatePublicInterface;
    private generateMsgpackInterface;
    private generateToMethod;
    private generateFromMethod;
    private generateConverter;
    private generateImports;
    private generateBbApiBaseInterface;
    private generateApiClass;
    private getApiClassName;
    private getWasmType;
    private generateApiMethod;
    private generateNativeApiClass;
}
export declare function createSharedTypesCompiler(): SchemaCompiler;
export declare function createSyncApiCompiler(): SchemaCompiler;
export declare function createAsyncApiCompiler(): SchemaCompiler;
export declare function createNativeApiCompiler(): SchemaCompiler;
//# sourceMappingURL=schema_compiler.d.ts.map