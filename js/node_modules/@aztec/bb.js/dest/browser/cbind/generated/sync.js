// AUTOGENERATED FILE - DO NOT EDIT
import { Decoder, Encoder } from 'msgpackr';
import { fromCircuitComputeVk, fromCircuitProve, fromCircuitStats, fromCircuitVerify, fromCircuitWriteSolidityVerifier, fromClientIvcAccumulate, fromClientIvcCheckPrecomputedVk, fromClientIvcComputeIvcVk, fromClientIvcComputeStandaloneVk, fromClientIvcLoad, fromClientIvcProve, fromClientIvcStart, fromClientIvcStats, fromClientIvcVerify, fromVkAsFields, toCircuitComputeVkResponse, toCircuitInfoResponse, toCircuitProveResponse, toCircuitVerifyResponse, toCircuitWriteSolidityVerifierResponse, toClientIvcAccumulateResponse, toClientIvcCheckPrecomputedVkResponse, toClientIvcComputeIvcVkResponse, toClientIvcComputeStandaloneVkResponse, toClientIvcLoadResponse, toClientIvcProveResponse, toClientIvcStartResponse, toClientIvcStatsResponse, toClientIvcVerifyResponse, toVkAsFieldsResponse } from './api_types.js';
function msgpackCall(wasm, cbind, input) { const inputBuffer = new Encoder({ useRecords: false }).pack(input); const encodedResult = wasm.cbindCall(cbind, inputBuffer); return new Decoder({ useRecords: false }).unpack(encodedResult); }
export class SyncApi {
    constructor(wasm) {
        this.wasm = wasm;
    }
    circuitProve(command) {
        const msgpackCommand = fromCircuitProve(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitProve", msgpackCommand]]);
        if (variantName !== 'CircuitProveResponse') {
            throw new Error(`Expected variant name 'CircuitProveResponse' but got '${variantName}'`);
        }
        return toCircuitProveResponse(result);
    }
    circuitComputeVk(command) {
        const msgpackCommand = fromCircuitComputeVk(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitComputeVk", msgpackCommand]]);
        if (variantName !== 'CircuitComputeVkResponse') {
            throw new Error(`Expected variant name 'CircuitComputeVkResponse' but got '${variantName}'`);
        }
        return toCircuitComputeVkResponse(result);
    }
    circuitStats(command) {
        const msgpackCommand = fromCircuitStats(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitStats", msgpackCommand]]);
        if (variantName !== 'CircuitInfoResponse') {
            throw new Error(`Expected variant name 'CircuitInfoResponse' but got '${variantName}'`);
        }
        return toCircuitInfoResponse(result);
    }
    circuitVerify(command) {
        const msgpackCommand = fromCircuitVerify(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitVerify", msgpackCommand]]);
        if (variantName !== 'CircuitVerifyResponse') {
            throw new Error(`Expected variant name 'CircuitVerifyResponse' but got '${variantName}'`);
        }
        return toCircuitVerifyResponse(result);
    }
    clientIvcComputeStandaloneVk(command) {
        const msgpackCommand = fromClientIvcComputeStandaloneVk(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcComputeStandaloneVk", msgpackCommand]]);
        if (variantName !== 'ClientIvcComputeStandaloneVkResponse') {
            throw new Error(`Expected variant name 'ClientIvcComputeStandaloneVkResponse' but got '${variantName}'`);
        }
        return toClientIvcComputeStandaloneVkResponse(result);
    }
    clientIvcComputeIvcVk(command) {
        const msgpackCommand = fromClientIvcComputeIvcVk(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcComputeIvcVk", msgpackCommand]]);
        if (variantName !== 'ClientIvcComputeIvcVkResponse') {
            throw new Error(`Expected variant name 'ClientIvcComputeIvcVkResponse' but got '${variantName}'`);
        }
        return toClientIvcComputeIvcVkResponse(result);
    }
    clientIvcStart(command) {
        const msgpackCommand = fromClientIvcStart(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcStart", msgpackCommand]]);
        if (variantName !== 'ClientIvcStartResponse') {
            throw new Error(`Expected variant name 'ClientIvcStartResponse' but got '${variantName}'`);
        }
        return toClientIvcStartResponse(result);
    }
    clientIvcLoad(command) {
        const msgpackCommand = fromClientIvcLoad(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcLoad", msgpackCommand]]);
        if (variantName !== 'ClientIvcLoadResponse') {
            throw new Error(`Expected variant name 'ClientIvcLoadResponse' but got '${variantName}'`);
        }
        return toClientIvcLoadResponse(result);
    }
    clientIvcAccumulate(command) {
        const msgpackCommand = fromClientIvcAccumulate(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcAccumulate", msgpackCommand]]);
        if (variantName !== 'ClientIvcAccumulateResponse') {
            throw new Error(`Expected variant name 'ClientIvcAccumulateResponse' but got '${variantName}'`);
        }
        return toClientIvcAccumulateResponse(result);
    }
    clientIvcProve(command) {
        const msgpackCommand = fromClientIvcProve(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcProve", msgpackCommand]]);
        if (variantName !== 'ClientIvcProveResponse') {
            throw new Error(`Expected variant name 'ClientIvcProveResponse' but got '${variantName}'`);
        }
        return toClientIvcProveResponse(result);
    }
    clientIvcVerify(command) {
        const msgpackCommand = fromClientIvcVerify(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcVerify", msgpackCommand]]);
        if (variantName !== 'ClientIvcVerifyResponse') {
            throw new Error(`Expected variant name 'ClientIvcVerifyResponse' but got '${variantName}'`);
        }
        return toClientIvcVerifyResponse(result);
    }
    vkAsFields(command) {
        const msgpackCommand = fromVkAsFields(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["VkAsFields", msgpackCommand]]);
        if (variantName !== 'VkAsFieldsResponse') {
            throw new Error(`Expected variant name 'VkAsFieldsResponse' but got '${variantName}'`);
        }
        return toVkAsFieldsResponse(result);
    }
    circuitWriteSolidityVerifier(command) {
        const msgpackCommand = fromCircuitWriteSolidityVerifier(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitWriteSolidityVerifier", msgpackCommand]]);
        if (variantName !== 'CircuitWriteSolidityVerifierResponse') {
            throw new Error(`Expected variant name 'CircuitWriteSolidityVerifierResponse' but got '${variantName}'`);
        }
        return toCircuitWriteSolidityVerifierResponse(result);
    }
    clientIvcCheckPrecomputedVk(command) {
        const msgpackCommand = fromClientIvcCheckPrecomputedVk(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcCheckPrecomputedVk", msgpackCommand]]);
        if (variantName !== 'ClientIvcCheckPrecomputedVkResponse') {
            throw new Error(`Expected variant name 'ClientIvcCheckPrecomputedVkResponse' but got '${variantName}'`);
        }
        return toClientIvcCheckPrecomputedVkResponse(result);
    }
    clientIvcStats(command) {
        const msgpackCommand = fromClientIvcStats(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcStats", msgpackCommand]]);
        if (variantName !== 'ClientIvcStatsResponse') {
            throw new Error(`Expected variant name 'ClientIvcStatsResponse' but got '${variantName}'`);
        }
        return toClientIvcStatsResponse(result);
    }
    destroy() {
        return this.wasm.destroy();
    }
}
//# sourceMappingURL=data:application/json;base64,