// AUTOGENERATED FILE - DO NOT EDIT
import { spawn } from 'child_process';
import { Decoder, Encoder } from 'msgpackr';
import { fromCircuitComputeVk, fromCircuitProve, fromCircuitStats, fromCircuitVerify, fromCircuitWriteSolidityVerifier, fromClientIvcAccumulate, fromClientIvcCheckPrecomputedVk, fromClientIvcComputeIvcVk, fromClientIvcComputeStandaloneVk, fromClientIvcLoad, fromClientIvcProve, fromClientIvcStart, fromClientIvcStats, fromClientIvcVerify, fromVkAsFields, toCircuitComputeVkResponse, toCircuitInfoResponse, toCircuitProveResponse, toCircuitVerifyResponse, toCircuitWriteSolidityVerifierResponse, toClientIvcAccumulateResponse, toClientIvcCheckPrecomputedVkResponse, toClientIvcComputeIvcVkResponse, toClientIvcComputeStandaloneVkResponse, toClientIvcLoadResponse, toClientIvcProveResponse, toClientIvcStartResponse, toClientIvcStatsResponse, toClientIvcVerifyResponse, toVkAsFieldsResponse } from './api_types.js';
class StreamBuffer {
    constructor() {
        this.buffer = Buffer.alloc(0);
        this.expectedLength = null;
    }
    addData(data) {
        // Create buffer to grow as needed
        const newBuffer = Buffer.allocUnsafe(this.buffer.length + data.length);
        this.buffer.copy(newBuffer, 0);
        data.copy(newBuffer, this.buffer.length);
        this.buffer = newBuffer;
        const messages = [];
        while (true) {
            if (this.expectedLength === null) {
                if (this.buffer.length < 4)
                    break;
                this.expectedLength = this.buffer.readUInt32LE(0);
                this.buffer = this.buffer.subarray(4);
            }
            if (this.buffer.length < this.expectedLength)
                break;
            // Extract complete message
            const messageBuffer = this.buffer.subarray(0, this.expectedLength);
            messages.push(messageBuffer);
            this.buffer = this.buffer.subarray(this.expectedLength);
            this.expectedLength = null;
        }
        return messages;
    }
}
export class NativeApi {
    constructor(proc) {
        this.proc = proc;
        this.decoder = new Decoder({ useRecords: false });
        this.encoder = new Encoder({ useRecords: false });
        this.pendingRequests = [];
    }
    static async new(bbPath = 'bb', logger = console.log) {
        const proc = spawn(bbPath, ['msgpack', 'run'], {
            stdio: ['pipe', 'pipe', 'pipe'],
        });
        if (!proc.stdout || !proc.stdin) {
            throw new Error('Failed to initialize bb process');
        }
        const api = new NativeApi(proc);
        const streamBuffer = new StreamBuffer();
        proc.stdout.on('data', (data) => {
            const messages = streamBuffer.addData(data);
            for (const messageBuffer of messages) {
                const pendingRequest = api.pendingRequests.shift();
                if (!pendingRequest) {
                    throw new Error('Received response without a pending request');
                }
                try {
                    const decoded = api.decoder.decode(messageBuffer);
                    if (!Array.isArray(decoded) || decoded.length !== 2) {
                        throw new Error(`Invalid response format: ${JSON.stringify(decoded)}`);
                    }
                    const [variantName, result] = decoded;
                    pendingRequest.resolve([variantName, result]);
                }
                catch (error) {
                    pendingRequest.reject(error);
                    break;
                }
            }
        });
        proc.stderr.on('data', (data) => {
            logger(data.toString().trim());
        });
        proc.on('error', err => {
            throw new Error(err.message);
        });
        return api;
    }
    sendCommand(command) {
        return new Promise((resolve, reject) => {
            this.pendingRequests.push({ resolve, reject });
            const encoded = this.encoder.encode(command);
            // Write length prefix (4 bytes, little-endian)
            const lengthBuffer = Buffer.allocUnsafe(4);
            lengthBuffer.writeUInt32LE(encoded.length, 0);
            // Write length prefix followed by the encoded data
            this.proc.stdin.write(lengthBuffer);
            this.proc.stdin.write(encoded);
        });
    }
    async close() {
        this.proc.kill();
    }
    destroy() {
        return this.close();
    }
    circuitProve(command) {
        const msgpackCommand = fromCircuitProve(command);
        return this.sendCommand(['CircuitProve', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitProveResponse') {
                throw new Error(`Expected variant name 'CircuitProveResponse' but got '${variantName}'`);
            }
            return toCircuitProveResponse(result);
        });
    }
    circuitComputeVk(command) {
        const msgpackCommand = fromCircuitComputeVk(command);
        return this.sendCommand(['CircuitComputeVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitComputeVkResponse') {
                throw new Error(`Expected variant name 'CircuitComputeVkResponse' but got '${variantName}'`);
            }
            return toCircuitComputeVkResponse(result);
        });
    }
    circuitStats(command) {
        const msgpackCommand = fromCircuitStats(command);
        return this.sendCommand(['CircuitStats', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitInfoResponse') {
                throw new Error(`Expected variant name 'CircuitInfoResponse' but got '${variantName}'`);
            }
            return toCircuitInfoResponse(result);
        });
    }
    circuitVerify(command) {
        const msgpackCommand = fromCircuitVerify(command);
        return this.sendCommand(['CircuitVerify', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitVerifyResponse') {
                throw new Error(`Expected variant name 'CircuitVerifyResponse' but got '${variantName}'`);
            }
            return toCircuitVerifyResponse(result);
        });
    }
    clientIvcComputeStandaloneVk(command) {
        const msgpackCommand = fromClientIvcComputeStandaloneVk(command);
        return this.sendCommand(['ClientIvcComputeStandaloneVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcComputeStandaloneVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcComputeStandaloneVkResponse' but got '${variantName}'`);
            }
            return toClientIvcComputeStandaloneVkResponse(result);
        });
    }
    clientIvcComputeIvcVk(command) {
        const msgpackCommand = fromClientIvcComputeIvcVk(command);
        return this.sendCommand(['ClientIvcComputeIvcVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcComputeIvcVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcComputeIvcVkResponse' but got '${variantName}'`);
            }
            return toClientIvcComputeIvcVkResponse(result);
        });
    }
    clientIvcStart(command) {
        const msgpackCommand = fromClientIvcStart(command);
        return this.sendCommand(['ClientIvcStart', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcStartResponse') {
                throw new Error(`Expected variant name 'ClientIvcStartResponse' but got '${variantName}'`);
            }
            return toClientIvcStartResponse(result);
        });
    }
    clientIvcLoad(command) {
        const msgpackCommand = fromClientIvcLoad(command);
        return this.sendCommand(['ClientIvcLoad', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcLoadResponse') {
                throw new Error(`Expected variant name 'ClientIvcLoadResponse' but got '${variantName}'`);
            }
            return toClientIvcLoadResponse(result);
        });
    }
    clientIvcAccumulate(command) {
        const msgpackCommand = fromClientIvcAccumulate(command);
        return this.sendCommand(['ClientIvcAccumulate', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcAccumulateResponse') {
                throw new Error(`Expected variant name 'ClientIvcAccumulateResponse' but got '${variantName}'`);
            }
            return toClientIvcAccumulateResponse(result);
        });
    }
    clientIvcProve(command) {
        const msgpackCommand = fromClientIvcProve(command);
        return this.sendCommand(['ClientIvcProve', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcProveResponse') {
                throw new Error(`Expected variant name 'ClientIvcProveResponse' but got '${variantName}'`);
            }
            return toClientIvcProveResponse(result);
        });
    }
    clientIvcVerify(command) {
        const msgpackCommand = fromClientIvcVerify(command);
        return this.sendCommand(['ClientIvcVerify', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcVerifyResponse') {
                throw new Error(`Expected variant name 'ClientIvcVerifyResponse' but got '${variantName}'`);
            }
            return toClientIvcVerifyResponse(result);
        });
    }
    vkAsFields(command) {
        const msgpackCommand = fromVkAsFields(command);
        return this.sendCommand(['VkAsFields', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'VkAsFieldsResponse') {
                throw new Error(`Expected variant name 'VkAsFieldsResponse' but got '${variantName}'`);
            }
            return toVkAsFieldsResponse(result);
        });
    }
    circuitWriteSolidityVerifier(command) {
        const msgpackCommand = fromCircuitWriteSolidityVerifier(command);
        return this.sendCommand(['CircuitWriteSolidityVerifier', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitWriteSolidityVerifierResponse') {
                throw new Error(`Expected variant name 'CircuitWriteSolidityVerifierResponse' but got '${variantName}'`);
            }
            return toCircuitWriteSolidityVerifierResponse(result);
        });
    }
    clientIvcCheckPrecomputedVk(command) {
        const msgpackCommand = fromClientIvcCheckPrecomputedVk(command);
        return this.sendCommand(['ClientIvcCheckPrecomputedVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcCheckPrecomputedVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcCheckPrecomputedVkResponse' but got '${variantName}'`);
            }
            return toClientIvcCheckPrecomputedVkResponse(result);
        });
    }
    clientIvcStats(command) {
        const msgpackCommand = fromClientIvcStats(command);
        return this.sendCommand(['ClientIvcStats', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcStatsResponse') {
                throw new Error(`Expected variant name 'ClientIvcStatsResponse' but got '${variantName}'`);
            }
            return toClientIvcStatsResponse(result);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,