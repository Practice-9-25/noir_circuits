import { BarretenbergWasmMainWorker } from "../../barretenberg_wasm/barretenberg_wasm_main/index.js";
import { BbApiBase, CircuitComputeVk, CircuitComputeVkResponse, CircuitInfoResponse, CircuitProve, CircuitProveResponse, CircuitStats, CircuitVerify, CircuitVerifyResponse, CircuitWriteSolidityVerifier, CircuitWriteSolidityVerifierResponse, ClientIvcAccumulate, ClientIvcAccumulateResponse, ClientIvcCheckPrecomputedVk, ClientIvcCheckPrecomputedVkResponse, ClientIvcComputeIvcVk, ClientIvcComputeIvcVkResponse, ClientIvcComputeStandaloneVk, ClientIvcComputeStandaloneVkResponse, ClientIvcLoad, ClientIvcLoadResponse, ClientIvcProve, ClientIvcProveResponse, ClientIvcStart, ClientIvcStartResponse, ClientIvcStats, ClientIvcStatsResponse, ClientIvcVerify, ClientIvcVerifyResponse, VkAsFields, VkAsFieldsResponse } from './api_types.js';
export declare class AsyncApi implements BbApiBase {
    protected wasm: BarretenbergWasmMainWorker;
    constructor(wasm: BarretenbergWasmMainWorker);
    circuitProve(command: CircuitProve): Promise<CircuitProveResponse>;
    circuitComputeVk(command: CircuitComputeVk): Promise<CircuitComputeVkResponse>;
    circuitStats(command: CircuitStats): Promise<CircuitInfoResponse>;
    circuitVerify(command: CircuitVerify): Promise<CircuitVerifyResponse>;
    clientIvcComputeStandaloneVk(command: ClientIvcComputeStandaloneVk): Promise<ClientIvcComputeStandaloneVkResponse>;
    clientIvcComputeIvcVk(command: ClientIvcComputeIvcVk): Promise<ClientIvcComputeIvcVkResponse>;
    clientIvcStart(command: ClientIvcStart): Promise<ClientIvcStartResponse>;
    clientIvcLoad(command: ClientIvcLoad): Promise<ClientIvcLoadResponse>;
    clientIvcAccumulate(command: ClientIvcAccumulate): Promise<ClientIvcAccumulateResponse>;
    clientIvcProve(command: ClientIvcProve): Promise<ClientIvcProveResponse>;
    clientIvcVerify(command: ClientIvcVerify): Promise<ClientIvcVerifyResponse>;
    vkAsFields(command: VkAsFields): Promise<VkAsFieldsResponse>;
    circuitWriteSolidityVerifier(command: CircuitWriteSolidityVerifier): Promise<CircuitWriteSolidityVerifierResponse>;
    clientIvcCheckPrecomputedVk(command: ClientIvcCheckPrecomputedVk): Promise<ClientIvcCheckPrecomputedVkResponse>;
    clientIvcStats(command: ClientIvcStats): Promise<ClientIvcStatsResponse>;
    destroy(): Promise<void>;
}
//# sourceMappingURL=async.d.ts.map