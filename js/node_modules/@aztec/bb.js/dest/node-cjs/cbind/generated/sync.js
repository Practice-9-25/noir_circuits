"use strict";
// AUTOGENERATED FILE - DO NOT EDIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncApi = void 0;
const msgpackr_1 = require("msgpackr");
const api_types_js_1 = require("./api_types.js");
function msgpackCall(wasm, cbind, input) { const inputBuffer = new msgpackr_1.Encoder({ useRecords: false }).pack(input); const encodedResult = wasm.cbindCall(cbind, inputBuffer); return new msgpackr_1.Decoder({ useRecords: false }).unpack(encodedResult); }
class SyncApi {
    constructor(wasm) {
        this.wasm = wasm;
    }
    circuitProve(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitProve)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitProve", msgpackCommand]]);
        if (variantName !== 'CircuitProveResponse') {
            throw new Error(`Expected variant name 'CircuitProveResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toCircuitProveResponse)(result);
    }
    circuitComputeVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitComputeVk)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitComputeVk", msgpackCommand]]);
        if (variantName !== 'CircuitComputeVkResponse') {
            throw new Error(`Expected variant name 'CircuitComputeVkResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toCircuitComputeVkResponse)(result);
    }
    circuitStats(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitStats)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitStats", msgpackCommand]]);
        if (variantName !== 'CircuitInfoResponse') {
            throw new Error(`Expected variant name 'CircuitInfoResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toCircuitInfoResponse)(result);
    }
    circuitVerify(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitVerify)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitVerify", msgpackCommand]]);
        if (variantName !== 'CircuitVerifyResponse') {
            throw new Error(`Expected variant name 'CircuitVerifyResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toCircuitVerifyResponse)(result);
    }
    clientIvcComputeStandaloneVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcComputeStandaloneVk)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcComputeStandaloneVk", msgpackCommand]]);
        if (variantName !== 'ClientIvcComputeStandaloneVkResponse') {
            throw new Error(`Expected variant name 'ClientIvcComputeStandaloneVkResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcComputeStandaloneVkResponse)(result);
    }
    clientIvcComputeIvcVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcComputeIvcVk)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcComputeIvcVk", msgpackCommand]]);
        if (variantName !== 'ClientIvcComputeIvcVkResponse') {
            throw new Error(`Expected variant name 'ClientIvcComputeIvcVkResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcComputeIvcVkResponse)(result);
    }
    clientIvcStart(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcStart)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcStart", msgpackCommand]]);
        if (variantName !== 'ClientIvcStartResponse') {
            throw new Error(`Expected variant name 'ClientIvcStartResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcStartResponse)(result);
    }
    clientIvcLoad(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcLoad)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcLoad", msgpackCommand]]);
        if (variantName !== 'ClientIvcLoadResponse') {
            throw new Error(`Expected variant name 'ClientIvcLoadResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcLoadResponse)(result);
    }
    clientIvcAccumulate(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcAccumulate)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcAccumulate", msgpackCommand]]);
        if (variantName !== 'ClientIvcAccumulateResponse') {
            throw new Error(`Expected variant name 'ClientIvcAccumulateResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcAccumulateResponse)(result);
    }
    clientIvcProve(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcProve)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcProve", msgpackCommand]]);
        if (variantName !== 'ClientIvcProveResponse') {
            throw new Error(`Expected variant name 'ClientIvcProveResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcProveResponse)(result);
    }
    clientIvcVerify(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcVerify)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcVerify", msgpackCommand]]);
        if (variantName !== 'ClientIvcVerifyResponse') {
            throw new Error(`Expected variant name 'ClientIvcVerifyResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcVerifyResponse)(result);
    }
    vkAsFields(command) {
        const msgpackCommand = (0, api_types_js_1.fromVkAsFields)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["VkAsFields", msgpackCommand]]);
        if (variantName !== 'VkAsFieldsResponse') {
            throw new Error(`Expected variant name 'VkAsFieldsResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toVkAsFieldsResponse)(result);
    }
    circuitWriteSolidityVerifier(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitWriteSolidityVerifier)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["CircuitWriteSolidityVerifier", msgpackCommand]]);
        if (variantName !== 'CircuitWriteSolidityVerifierResponse') {
            throw new Error(`Expected variant name 'CircuitWriteSolidityVerifierResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toCircuitWriteSolidityVerifierResponse)(result);
    }
    clientIvcCheckPrecomputedVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcCheckPrecomputedVk)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcCheckPrecomputedVk", msgpackCommand]]);
        if (variantName !== 'ClientIvcCheckPrecomputedVkResponse') {
            throw new Error(`Expected variant name 'ClientIvcCheckPrecomputedVkResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcCheckPrecomputedVkResponse)(result);
    }
    clientIvcStats(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcStats)(command);
        const [variantName, result] = msgpackCall(this.wasm, 'bbapi', [["ClientIvcStats", msgpackCommand]]);
        if (variantName !== 'ClientIvcStatsResponse') {
            throw new Error(`Expected variant name 'ClientIvcStatsResponse' but got '${variantName}'`);
        }
        return (0, api_types_js_1.toClientIvcStatsResponse)(result);
    }
    destroy() {
        return this.wasm.destroy();
    }
}
exports.SyncApi = SyncApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jYmluZC9nZW5lcmF0ZWQvc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DOzs7QUFHbkMsdUNBQTRDO0FBQzVDLGlEQUF1bEQ7QUFFdmxELFNBQVMsV0FBVyxDQUFDLElBQTBCLEVBQUUsS0FBYSxFQUFFLEtBQVksSUFBSyxNQUFNLFdBQVcsR0FBRyxJQUFJLGtCQUFPLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFFLE9BQU8sSUFBSSxrQkFBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUEsQ0FBQztBQUNsUixNQUFhLE9BQU87SUFDbEIsWUFBc0IsSUFBMEI7UUFBMUIsU0FBSSxHQUFKLElBQUksQ0FBc0I7SUFBRyxDQUFDO0lBRXBELFlBQVksQ0FBQyxPQUFxQjtRQUNoQyxNQUFNLGNBQWMsR0FBRyxJQUFBLCtCQUFnQixFQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xHLElBQUksV0FBVyxLQUFLLHNCQUFzQixFQUFFLENBQUM7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUMzRixDQUFDO1FBQ0QsT0FBTyxJQUFBLHFDQUFzQixFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFF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