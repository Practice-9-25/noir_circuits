"use strict";
// AUTOGENERATED FILE - DO NOT EDIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeApi = void 0;
const child_process_1 = require("child_process");
const msgpackr_1 = require("msgpackr");
const api_types_js_1 = require("./api_types.js");
class StreamBuffer {
    constructor() {
        this.buffer = Buffer.alloc(0);
        this.expectedLength = null;
    }
    addData(data) {
        // Create buffer to grow as needed
        const newBuffer = Buffer.allocUnsafe(this.buffer.length + data.length);
        this.buffer.copy(newBuffer, 0);
        data.copy(newBuffer, this.buffer.length);
        this.buffer = newBuffer;
        const messages = [];
        while (true) {
            if (this.expectedLength === null) {
                if (this.buffer.length < 4)
                    break;
                this.expectedLength = this.buffer.readUInt32LE(0);
                this.buffer = this.buffer.subarray(4);
            }
            if (this.buffer.length < this.expectedLength)
                break;
            // Extract complete message
            const messageBuffer = this.buffer.subarray(0, this.expectedLength);
            messages.push(messageBuffer);
            this.buffer = this.buffer.subarray(this.expectedLength);
            this.expectedLength = null;
        }
        return messages;
    }
}
class NativeApi {
    constructor(proc) {
        this.proc = proc;
        this.decoder = new msgpackr_1.Decoder({ useRecords: false });
        this.encoder = new msgpackr_1.Encoder({ useRecords: false });
        this.pendingRequests = [];
    }
    static async new(bbPath = 'bb', logger = console.log) {
        const proc = (0, child_process_1.spawn)(bbPath, ['msgpack', 'run'], {
            stdio: ['pipe', 'pipe', 'pipe'],
        });
        if (!proc.stdout || !proc.stdin) {
            throw new Error('Failed to initialize bb process');
        }
        const api = new NativeApi(proc);
        const streamBuffer = new StreamBuffer();
        proc.stdout.on('data', (data) => {
            const messages = streamBuffer.addData(data);
            for (const messageBuffer of messages) {
                const pendingRequest = api.pendingRequests.shift();
                if (!pendingRequest) {
                    throw new Error('Received response without a pending request');
                }
                try {
                    const decoded = api.decoder.decode(messageBuffer);
                    if (!Array.isArray(decoded) || decoded.length !== 2) {
                        throw new Error(`Invalid response format: ${JSON.stringify(decoded)}`);
                    }
                    const [variantName, result] = decoded;
                    pendingRequest.resolve([variantName, result]);
                }
                catch (error) {
                    pendingRequest.reject(error);
                    break;
                }
            }
        });
        proc.stderr.on('data', (data) => {
            logger(data.toString().trim());
        });
        proc.on('error', err => {
            throw new Error(err.message);
        });
        return api;
    }
    sendCommand(command) {
        return new Promise((resolve, reject) => {
            this.pendingRequests.push({ resolve, reject });
            const encoded = this.encoder.encode(command);
            // Write length prefix (4 bytes, little-endian)
            const lengthBuffer = Buffer.allocUnsafe(4);
            lengthBuffer.writeUInt32LE(encoded.length, 0);
            // Write length prefix followed by the encoded data
            this.proc.stdin.write(lengthBuffer);
            this.proc.stdin.write(encoded);
        });
    }
    async close() {
        this.proc.kill();
    }
    destroy() {
        return this.close();
    }
    circuitProve(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitProve)(command);
        return this.sendCommand(['CircuitProve', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitProveResponse') {
                throw new Error(`Expected variant name 'CircuitProveResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitProveResponse)(result);
        });
    }
    circuitComputeVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitComputeVk)(command);
        return this.sendCommand(['CircuitComputeVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitComputeVkResponse') {
                throw new Error(`Expected variant name 'CircuitComputeVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitComputeVkResponse)(result);
        });
    }
    circuitStats(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitStats)(command);
        return this.sendCommand(['CircuitStats', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitInfoResponse') {
                throw new Error(`Expected variant name 'CircuitInfoResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitInfoResponse)(result);
        });
    }
    circuitVerify(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitVerify)(command);
        return this.sendCommand(['CircuitVerify', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitVerifyResponse') {
                throw new Error(`Expected variant name 'CircuitVerifyResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitVerifyResponse)(result);
        });
    }
    clientIvcComputeStandaloneVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcComputeStandaloneVk)(command);
        return this.sendCommand(['ClientIvcComputeStandaloneVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcComputeStandaloneVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcComputeStandaloneVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcComputeStandaloneVkResponse)(result);
        });
    }
    clientIvcComputeIvcVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcComputeIvcVk)(command);
        return this.sendCommand(['ClientIvcComputeIvcVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcComputeIvcVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcComputeIvcVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcComputeIvcVkResponse)(result);
        });
    }
    clientIvcStart(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcStart)(command);
        return this.sendCommand(['ClientIvcStart', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcStartResponse') {
                throw new Error(`Expected variant name 'ClientIvcStartResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcStartResponse)(result);
        });
    }
    clientIvcLoad(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcLoad)(command);
        return this.sendCommand(['ClientIvcLoad', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcLoadResponse') {
                throw new Error(`Expected variant name 'ClientIvcLoadResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcLoadResponse)(result);
        });
    }
    clientIvcAccumulate(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcAccumulate)(command);
        return this.sendCommand(['ClientIvcAccumulate', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcAccumulateResponse') {
                throw new Error(`Expected variant name 'ClientIvcAccumulateResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcAccumulateResponse)(result);
        });
    }
    clientIvcProve(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcProve)(command);
        return this.sendCommand(['ClientIvcProve', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcProveResponse') {
                throw new Error(`Expected variant name 'ClientIvcProveResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcProveResponse)(result);
        });
    }
    clientIvcVerify(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcVerify)(command);
        return this.sendCommand(['ClientIvcVerify', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcVerifyResponse') {
                throw new Error(`Expected variant name 'ClientIvcVerifyResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcVerifyResponse)(result);
        });
    }
    vkAsFields(command) {
        const msgpackCommand = (0, api_types_js_1.fromVkAsFields)(command);
        return this.sendCommand(['VkAsFields', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'VkAsFieldsResponse') {
                throw new Error(`Expected variant name 'VkAsFieldsResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toVkAsFieldsResponse)(result);
        });
    }
    circuitWriteSolidityVerifier(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitWriteSolidityVerifier)(command);
        return this.sendCommand(['CircuitWriteSolidityVerifier', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'CircuitWriteSolidityVerifierResponse') {
                throw new Error(`Expected variant name 'CircuitWriteSolidityVerifierResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitWriteSolidityVerifierResponse)(result);
        });
    }
    clientIvcCheckPrecomputedVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcCheckPrecomputedVk)(command);
        return this.sendCommand(['ClientIvcCheckPrecomputedVk', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcCheckPrecomputedVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcCheckPrecomputedVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcCheckPrecomputedVkResponse)(result);
        });
    }
    clientIvcStats(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcStats)(command);
        return this.sendCommand(['ClientIvcStats', msgpackCommand]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcStatsResponse') {
                throw new Error(`Expected variant name 'ClientIvcStatsResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcStatsResponse)(result);
        });
    }
}
exports.NativeApi = NativeApi;
//# sourceMappingURL=data:application/json;base64,