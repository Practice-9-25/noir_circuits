"use strict";
// AUTOGENERATED FILE - DO NOT EDIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCircuitComputeVk = toCircuitComputeVk;
exports.fromCircuitComputeVk = fromCircuitComputeVk;
exports.toCircuitComputeVkResponse = toCircuitComputeVkResponse;
exports.fromCircuitComputeVkResponse = fromCircuitComputeVkResponse;
exports.toCircuitInfoResponse = toCircuitInfoResponse;
exports.fromCircuitInfoResponse = fromCircuitInfoResponse;
exports.toCircuitInput = toCircuitInput;
exports.fromCircuitInput = fromCircuitInput;
exports.toCircuitInputNoVK = toCircuitInputNoVK;
exports.fromCircuitInputNoVK = fromCircuitInputNoVK;
exports.toCircuitProve = toCircuitProve;
exports.fromCircuitProve = fromCircuitProve;
exports.toCircuitProveResponse = toCircuitProveResponse;
exports.fromCircuitProveResponse = fromCircuitProveResponse;
exports.toCircuitStats = toCircuitStats;
exports.fromCircuitStats = fromCircuitStats;
exports.toCircuitVerify = toCircuitVerify;
exports.fromCircuitVerify = fromCircuitVerify;
exports.toCircuitVerifyResponse = toCircuitVerifyResponse;
exports.fromCircuitVerifyResponse = fromCircuitVerifyResponse;
exports.toCircuitWriteSolidityVerifier = toCircuitWriteSolidityVerifier;
exports.fromCircuitWriteSolidityVerifier = fromCircuitWriteSolidityVerifier;
exports.toCircuitWriteSolidityVerifierResponse = toCircuitWriteSolidityVerifierResponse;
exports.fromCircuitWriteSolidityVerifierResponse = fromCircuitWriteSolidityVerifierResponse;
exports.toClientIvcAccumulate = toClientIvcAccumulate;
exports.fromClientIvcAccumulate = fromClientIvcAccumulate;
exports.toClientIvcAccumulateResponse = toClientIvcAccumulateResponse;
exports.fromClientIvcAccumulateResponse = fromClientIvcAccumulateResponse;
exports.toClientIvcCheckPrecomputedVk = toClientIvcCheckPrecomputedVk;
exports.fromClientIvcCheckPrecomputedVk = fromClientIvcCheckPrecomputedVk;
exports.toClientIvcCheckPrecomputedVkResponse = toClientIvcCheckPrecomputedVkResponse;
exports.fromClientIvcCheckPrecomputedVkResponse = fromClientIvcCheckPrecomputedVkResponse;
exports.toClientIvcComputeIvcVk = toClientIvcComputeIvcVk;
exports.fromClientIvcComputeIvcVk = fromClientIvcComputeIvcVk;
exports.toClientIvcComputeIvcVkResponse = toClientIvcComputeIvcVkResponse;
exports.fromClientIvcComputeIvcVkResponse = fromClientIvcComputeIvcVkResponse;
exports.toClientIvcComputeStandaloneVk = toClientIvcComputeStandaloneVk;
exports.fromClientIvcComputeStandaloneVk = fromClientIvcComputeStandaloneVk;
exports.toClientIvcComputeStandaloneVkResponse = toClientIvcComputeStandaloneVkResponse;
exports.fromClientIvcComputeStandaloneVkResponse = fromClientIvcComputeStandaloneVkResponse;
exports.toClientIvcLoad = toClientIvcLoad;
exports.fromClientIvcLoad = fromClientIvcLoad;
exports.toClientIvcLoadResponse = toClientIvcLoadResponse;
exports.fromClientIvcLoadResponse = fromClientIvcLoadResponse;
exports.toClientIVCProof = toClientIVCProof;
exports.fromClientIVCProof = fromClientIVCProof;
exports.toClientIvcProve = toClientIvcProve;
exports.fromClientIvcProve = fromClientIvcProve;
exports.toClientIvcProveResponse = toClientIvcProveResponse;
exports.fromClientIvcProveResponse = fromClientIvcProveResponse;
exports.toClientIvcStart = toClientIvcStart;
exports.fromClientIvcStart = fromClientIvcStart;
exports.toClientIvcStartResponse = toClientIvcStartResponse;
exports.fromClientIvcStartResponse = fromClientIvcStartResponse;
exports.toClientIvcStats = toClientIvcStats;
exports.fromClientIvcStats = fromClientIvcStats;
exports.toClientIvcStatsResponse = toClientIvcStatsResponse;
exports.fromClientIvcStatsResponse = fromClientIvcStatsResponse;
exports.toClientIvcVerify = toClientIvcVerify;
exports.fromClientIvcVerify = fromClientIvcVerify;
exports.toClientIvcVerifyResponse = toClientIvcVerifyResponse;
exports.fromClientIvcVerifyResponse = fromClientIvcVerifyResponse;
exports.toECCVMProof = toECCVMProof;
exports.fromECCVMProof = fromECCVMProof;
exports.toGoblinProof = toGoblinProof;
exports.fromGoblinProof = fromGoblinProof;
exports.toProofSystemSettings = toProofSystemSettings;
exports.fromProofSystemSettings = fromProofSystemSettings;
exports.toVkAsFields = toVkAsFields;
exports.fromVkAsFields = fromVkAsFields;
exports.toVkAsFieldsResponse = toVkAsFieldsResponse;
exports.fromVkAsFieldsResponse = fromVkAsFieldsResponse;
// Conversion functions (exported)
function toCircuitComputeVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in CircuitComputeVk deserialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitComputeVk deserialization");
    }
    ;
    return {
        circuit: toCircuitInputNoVK(o.circuit),
        settings: toProofSystemSettings(o.settings),
    };
}
function fromCircuitComputeVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in CircuitComputeVk serialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitComputeVk serialization");
    }
    ;
    return {
        circuit: fromCircuitInputNoVK(o.circuit),
        settings: fromProofSystemSettings(o.settings),
    };
}
function toCircuitComputeVkResponse(o) {
    if (o.bytes === undefined) {
        throw new Error("Expected bytes in CircuitComputeVkResponse deserialization");
    }
    if (o.fields === undefined) {
        throw new Error("Expected fields in CircuitComputeVkResponse deserialization");
    }
    if (o.hash === undefined) {
        throw new Error("Expected hash in CircuitComputeVkResponse deserialization");
    }
    ;
    return {
        bytes: o.bytes,
        fields: o.fields.map((v) => v),
        hash: o.hash,
    };
}
function fromCircuitComputeVkResponse(o) {
    if (o.bytes === undefined) {
        throw new Error("Expected bytes in CircuitComputeVkResponse serialization");
    }
    if (o.fields === undefined) {
        throw new Error("Expected fields in CircuitComputeVkResponse serialization");
    }
    if (o.hash === undefined) {
        throw new Error("Expected hash in CircuitComputeVkResponse serialization");
    }
    ;
    return {
        bytes: o.bytes,
        fields: o.fields.map((v) => v),
        hash: o.hash,
    };
}
function toCircuitInfoResponse(o) {
    if (o.num_gates === undefined) {
        throw new Error("Expected num_gates in CircuitInfoResponse deserialization");
    }
    if (o.num_gates_dyadic === undefined) {
        throw new Error("Expected num_gates_dyadic in CircuitInfoResponse deserialization");
    }
    if (o.num_acir_opcodes === undefined) {
        throw new Error("Expected num_acir_opcodes in CircuitInfoResponse deserialization");
    }
    if (o.gates_per_opcode === undefined) {
        throw new Error("Expected gates_per_opcode in CircuitInfoResponse deserialization");
    }
    ;
    return {
        numGates: o.num_gates,
        numGatesDyadic: o.num_gates_dyadic,
        numAcirOpcodes: o.num_acir_opcodes,
        gatesPerOpcode: o.gates_per_opcode.map((v) => v),
    };
}
function fromCircuitInfoResponse(o) {
    if (o.numGates === undefined) {
        throw new Error("Expected numGates in CircuitInfoResponse serialization");
    }
    if (o.numGatesDyadic === undefined) {
        throw new Error("Expected numGatesDyadic in CircuitInfoResponse serialization");
    }
    if (o.numAcirOpcodes === undefined) {
        throw new Error("Expected numAcirOpcodes in CircuitInfoResponse serialization");
    }
    if (o.gatesPerOpcode === undefined) {
        throw new Error("Expected gatesPerOpcode in CircuitInfoResponse serialization");
    }
    ;
    return {
        num_gates: o.numGates,
        num_gates_dyadic: o.numGatesDyadic,
        num_acir_opcodes: o.numAcirOpcodes,
        gates_per_opcode: o.gatesPerOpcode.map((v) => v),
    };
}
function toCircuitInput(o) {
    if (o.name === undefined) {
        throw new Error("Expected name in CircuitInput deserialization");
    }
    if (o.bytecode === undefined) {
        throw new Error("Expected bytecode in CircuitInput deserialization");
    }
    if (o.verification_key === undefined) {
        throw new Error("Expected verification_key in CircuitInput deserialization");
    }
    ;
    return {
        name: o.name,
        bytecode: o.bytecode,
        verificationKey: o.verification_key,
    };
}
function fromCircuitInput(o) {
    if (o.name === undefined) {
        throw new Error("Expected name in CircuitInput serialization");
    }
    if (o.bytecode === undefined) {
        throw new Error("Expected bytecode in CircuitInput serialization");
    }
    if (o.verificationKey === undefined) {
        throw new Error("Expected verificationKey in CircuitInput serialization");
    }
    ;
    return {
        name: o.name,
        bytecode: o.bytecode,
        verification_key: o.verificationKey,
    };
}
function toCircuitInputNoVK(o) {
    if (o.name === undefined) {
        throw new Error("Expected name in CircuitInputNoVK deserialization");
    }
    if (o.bytecode === undefined) {
        throw new Error("Expected bytecode in CircuitInputNoVK deserialization");
    }
    ;
    return {
        name: o.name,
        bytecode: o.bytecode,
    };
}
function fromCircuitInputNoVK(o) {
    if (o.name === undefined) {
        throw new Error("Expected name in CircuitInputNoVK serialization");
    }
    if (o.bytecode === undefined) {
        throw new Error("Expected bytecode in CircuitInputNoVK serialization");
    }
    ;
    return {
        name: o.name,
        bytecode: o.bytecode,
    };
}
function toCircuitProve(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in CircuitProve deserialization");
    }
    if (o.witness === undefined) {
        throw new Error("Expected witness in CircuitProve deserialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitProve deserialization");
    }
    ;
    return {
        circuit: toCircuitInput(o.circuit),
        witness: o.witness,
        settings: toProofSystemSettings(o.settings),
    };
}
function fromCircuitProve(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in CircuitProve serialization");
    }
    if (o.witness === undefined) {
        throw new Error("Expected witness in CircuitProve serialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitProve serialization");
    }
    ;
    return {
        circuit: fromCircuitInput(o.circuit),
        witness: o.witness,
        settings: fromProofSystemSettings(o.settings),
    };
}
function toCircuitProveResponse(o) {
    if (o.public_inputs === undefined) {
        throw new Error("Expected public_inputs in CircuitProveResponse deserialization");
    }
    if (o.proof === undefined) {
        throw new Error("Expected proof in CircuitProveResponse deserialization");
    }
    if (o.vk === undefined) {
        throw new Error("Expected vk in CircuitProveResponse deserialization");
    }
    ;
    return {
        publicInputs: o.public_inputs.map((v) => v),
        proof: o.proof.map((v) => v),
        vk: toCircuitComputeVkResponse(o.vk),
    };
}
function fromCircuitProveResponse(o) {
    if (o.publicInputs === undefined) {
        throw new Error("Expected publicInputs in CircuitProveResponse serialization");
    }
    if (o.proof === undefined) {
        throw new Error("Expected proof in CircuitProveResponse serialization");
    }
    if (o.vk === undefined) {
        throw new Error("Expected vk in CircuitProveResponse serialization");
    }
    ;
    return {
        public_inputs: o.publicInputs.map((v) => v),
        proof: o.proof.map((v) => v),
        vk: fromCircuitComputeVkResponse(o.vk),
    };
}
function toCircuitStats(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in CircuitStats deserialization");
    }
    if (o.include_gates_per_opcode === undefined) {
        throw new Error("Expected include_gates_per_opcode in CircuitStats deserialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitStats deserialization");
    }
    ;
    return {
        circuit: toCircuitInput(o.circuit),
        includeGatesPerOpcode: o.include_gates_per_opcode,
        settings: toProofSystemSettings(o.settings),
    };
}
function fromCircuitStats(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in CircuitStats serialization");
    }
    if (o.includeGatesPerOpcode === undefined) {
        throw new Error("Expected includeGatesPerOpcode in CircuitStats serialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitStats serialization");
    }
    ;
    return {
        circuit: fromCircuitInput(o.circuit),
        include_gates_per_opcode: o.includeGatesPerOpcode,
        settings: fromProofSystemSettings(o.settings),
    };
}
function toCircuitVerify(o) {
    if (o.verification_key === undefined) {
        throw new Error("Expected verification_key in CircuitVerify deserialization");
    }
    if (o.public_inputs === undefined) {
        throw new Error("Expected public_inputs in CircuitVerify deserialization");
    }
    if (o.proof === undefined) {
        throw new Error("Expected proof in CircuitVerify deserialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitVerify deserialization");
    }
    ;
    return {
        verificationKey: o.verification_key,
        publicInputs: o.public_inputs.map((v) => v),
        proof: o.proof.map((v) => v),
        settings: toProofSystemSettings(o.settings),
    };
}
function fromCircuitVerify(o) {
    if (o.verificationKey === undefined) {
        throw new Error("Expected verificationKey in CircuitVerify serialization");
    }
    if (o.publicInputs === undefined) {
        throw new Error("Expected publicInputs in CircuitVerify serialization");
    }
    if (o.proof === undefined) {
        throw new Error("Expected proof in CircuitVerify serialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitVerify serialization");
    }
    ;
    return {
        verification_key: o.verificationKey,
        public_inputs: o.publicInputs.map((v) => v),
        proof: o.proof.map((v) => v),
        settings: fromProofSystemSettings(o.settings),
    };
}
function toCircuitVerifyResponse(o) {
    if (o.verified === undefined) {
        throw new Error("Expected verified in CircuitVerifyResponse deserialization");
    }
    ;
    return {
        verified: o.verified,
    };
}
function fromCircuitVerifyResponse(o) {
    if (o.verified === undefined) {
        throw new Error("Expected verified in CircuitVerifyResponse serialization");
    }
    ;
    return {
        verified: o.verified,
    };
}
function toCircuitWriteSolidityVerifier(o) {
    if (o.verification_key === undefined) {
        throw new Error("Expected verification_key in CircuitWriteSolidityVerifier deserialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitWriteSolidityVerifier deserialization");
    }
    ;
    return {
        verificationKey: o.verification_key,
        settings: toProofSystemSettings(o.settings),
    };
}
function fromCircuitWriteSolidityVerifier(o) {
    if (o.verificationKey === undefined) {
        throw new Error("Expected verificationKey in CircuitWriteSolidityVerifier serialization");
    }
    if (o.settings === undefined) {
        throw new Error("Expected settings in CircuitWriteSolidityVerifier serialization");
    }
    ;
    return {
        verification_key: o.verificationKey,
        settings: fromProofSystemSettings(o.settings),
    };
}
function toCircuitWriteSolidityVerifierResponse(o) {
    if (o.solidity_code === undefined) {
        throw new Error("Expected solidity_code in CircuitWriteSolidityVerifierResponse deserialization");
    }
    ;
    return {
        solidityCode: o.solidity_code,
    };
}
function fromCircuitWriteSolidityVerifierResponse(o) {
    if (o.solidityCode === undefined) {
        throw new Error("Expected solidityCode in CircuitWriteSolidityVerifierResponse serialization");
    }
    ;
    return {
        solidity_code: o.solidityCode,
    };
}
function toClientIvcAccumulate(o) {
    if (o.witness === undefined) {
        throw new Error("Expected witness in ClientIvcAccumulate deserialization");
    }
    ;
    return {
        witness: o.witness,
    };
}
function fromClientIvcAccumulate(o) {
    if (o.witness === undefined) {
        throw new Error("Expected witness in ClientIvcAccumulate serialization");
    }
    ;
    return {
        witness: o.witness,
    };
}
function toClientIvcAccumulateResponse(o) {
    return {};
}
function fromClientIvcAccumulateResponse(o) {
    return {};
}
function toClientIvcCheckPrecomputedVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcCheckPrecomputedVk deserialization");
    }
    ;
    return {
        circuit: toCircuitInput(o.circuit),
    };
}
function fromClientIvcCheckPrecomputedVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcCheckPrecomputedVk serialization");
    }
    ;
    return {
        circuit: fromCircuitInput(o.circuit),
    };
}
function toClientIvcCheckPrecomputedVkResponse(o) {
    if (o.valid === undefined) {
        throw new Error("Expected valid in ClientIvcCheckPrecomputedVkResponse deserialization");
    }
    if (o.actual_vk === undefined) {
        throw new Error("Expected actual_vk in ClientIvcCheckPrecomputedVkResponse deserialization");
    }
    ;
    return {
        valid: o.valid,
        actualVk: o.actual_vk,
    };
}
function fromClientIvcCheckPrecomputedVkResponse(o) {
    if (o.valid === undefined) {
        throw new Error("Expected valid in ClientIvcCheckPrecomputedVkResponse serialization");
    }
    if (o.actualVk === undefined) {
        throw new Error("Expected actualVk in ClientIvcCheckPrecomputedVkResponse serialization");
    }
    ;
    return {
        valid: o.valid,
        actual_vk: o.actualVk,
    };
}
function toClientIvcComputeIvcVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcComputeIvcVk deserialization");
    }
    ;
    return {
        circuit: toCircuitInputNoVK(o.circuit),
    };
}
function fromClientIvcComputeIvcVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcComputeIvcVk serialization");
    }
    ;
    return {
        circuit: fromCircuitInputNoVK(o.circuit),
    };
}
function toClientIvcComputeIvcVkResponse(o) {
    if (o.bytes === undefined) {
        throw new Error("Expected bytes in ClientIvcComputeIvcVkResponse deserialization");
    }
    ;
    return {
        bytes: o.bytes,
    };
}
function fromClientIvcComputeIvcVkResponse(o) {
    if (o.bytes === undefined) {
        throw new Error("Expected bytes in ClientIvcComputeIvcVkResponse serialization");
    }
    ;
    return {
        bytes: o.bytes,
    };
}
function toClientIvcComputeStandaloneVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcComputeStandaloneVk deserialization");
    }
    ;
    return {
        circuit: toCircuitInputNoVK(o.circuit),
    };
}
function fromClientIvcComputeStandaloneVk(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcComputeStandaloneVk serialization");
    }
    ;
    return {
        circuit: fromCircuitInputNoVK(o.circuit),
    };
}
function toClientIvcComputeStandaloneVkResponse(o) {
    if (o.bytes === undefined) {
        throw new Error("Expected bytes in ClientIvcComputeStandaloneVkResponse deserialization");
    }
    if (o.fields === undefined) {
        throw new Error("Expected fields in ClientIvcComputeStandaloneVkResponse deserialization");
    }
    ;
    return {
        bytes: o.bytes,
        fields: o.fields.map((v) => v),
    };
}
function fromClientIvcComputeStandaloneVkResponse(o) {
    if (o.bytes === undefined) {
        throw new Error("Expected bytes in ClientIvcComputeStandaloneVkResponse serialization");
    }
    if (o.fields === undefined) {
        throw new Error("Expected fields in ClientIvcComputeStandaloneVkResponse serialization");
    }
    ;
    return {
        bytes: o.bytes,
        fields: o.fields.map((v) => v),
    };
}
function toClientIvcLoad(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcLoad deserialization");
    }
    ;
    return {
        circuit: toCircuitInput(o.circuit),
    };
}
function fromClientIvcLoad(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcLoad serialization");
    }
    ;
    return {
        circuit: fromCircuitInput(o.circuit),
    };
}
function toClientIvcLoadResponse(o) {
    return {};
}
function fromClientIvcLoadResponse(o) {
    return {};
}
function toClientIVCProof(o) {
    if (o.mega_proof === undefined) {
        throw new Error("Expected mega_proof in ClientIVCProof deserialization");
    }
    if (o.goblin_proof === undefined) {
        throw new Error("Expected goblin_proof in ClientIVCProof deserialization");
    }
    ;
    return {
        megaProof: o.mega_proof.map((v) => v),
        goblinProof: toGoblinProof(o.goblin_proof),
    };
}
function fromClientIVCProof(o) {
    if (o.megaProof === undefined) {
        throw new Error("Expected megaProof in ClientIVCProof serialization");
    }
    if (o.goblinProof === undefined) {
        throw new Error("Expected goblinProof in ClientIVCProof serialization");
    }
    ;
    return {
        mega_proof: o.megaProof.map((v) => v),
        goblin_proof: fromGoblinProof(o.goblinProof),
    };
}
function toClientIvcProve(o) {
    return {};
}
function fromClientIvcProve(o) {
    return {};
}
function toClientIvcProveResponse(o) {
    if (o.proof === undefined) {
        throw new Error("Expected proof in ClientIvcProveResponse deserialization");
    }
    ;
    return {
        proof: toClientIVCProof(o.proof),
    };
}
function fromClientIvcProveResponse(o) {
    if (o.proof === undefined) {
        throw new Error("Expected proof in ClientIvcProveResponse serialization");
    }
    ;
    return {
        proof: fromClientIVCProof(o.proof),
    };
}
function toClientIvcStart(o) {
    if (o.num_circuits === undefined) {
        throw new Error("Expected num_circuits in ClientIvcStart deserialization");
    }
    ;
    return {
        numCircuits: o.num_circuits,
    };
}
function fromClientIvcStart(o) {
    if (o.numCircuits === undefined) {
        throw new Error("Expected numCircuits in ClientIvcStart serialization");
    }
    ;
    return {
        num_circuits: o.numCircuits,
    };
}
function toClientIvcStartResponse(o) {
    return {};
}
function fromClientIvcStartResponse(o) {
    return {};
}
function toClientIvcStats(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcStats deserialization");
    }
    if (o.include_gates_per_opcode === undefined) {
        throw new Error("Expected include_gates_per_opcode in ClientIvcStats deserialization");
    }
    ;
    return {
        circuit: toCircuitInputNoVK(o.circuit),
        includeGatesPerOpcode: o.include_gates_per_opcode,
    };
}
function fromClientIvcStats(o) {
    if (o.circuit === undefined) {
        throw new Error("Expected circuit in ClientIvcStats serialization");
    }
    if (o.includeGatesPerOpcode === undefined) {
        throw new Error("Expected includeGatesPerOpcode in ClientIvcStats serialization");
    }
    ;
    return {
        circuit: fromCircuitInputNoVK(o.circuit),
        include_gates_per_opcode: o.includeGatesPerOpcode,
    };
}
function toClientIvcStatsResponse(o) {
    if (o.acir_opcodes === undefined) {
        throw new Error("Expected acir_opcodes in ClientIvcStatsResponse deserialization");
    }
    if (o.circuit_size === undefined) {
        throw new Error("Expected circuit_size in ClientIvcStatsResponse deserialization");
    }
    if (o.gates_per_opcode === undefined) {
        throw new Error("Expected gates_per_opcode in ClientIvcStatsResponse deserialization");
    }
    ;
    return {
        acirOpcodes: o.acir_opcodes,
        circuitSize: o.circuit_size,
        gatesPerOpcode: o.gates_per_opcode.map((v) => v),
    };
}
function fromClientIvcStatsResponse(o) {
    if (o.acirOpcodes === undefined) {
        throw new Error("Expected acirOpcodes in ClientIvcStatsResponse serialization");
    }
    if (o.circuitSize === undefined) {
        throw new Error("Expected circuitSize in ClientIvcStatsResponse serialization");
    }
    if (o.gatesPerOpcode === undefined) {
        throw new Error("Expected gatesPerOpcode in ClientIvcStatsResponse serialization");
    }
    ;
    return {
        acir_opcodes: o.acirOpcodes,
        circuit_size: o.circuitSize,
        gates_per_opcode: o.gatesPerOpcode.map((v) => v),
    };
}
function toClientIvcVerify(o) {
    if (o.proof === undefined) {
        throw new Error("Expected proof in ClientIvcVerify deserialization");
    }
    if (o.vk === undefined) {
        throw new Error("Expected vk in ClientIvcVerify deserialization");
    }
    ;
    return {
        proof: toClientIVCProof(o.proof),
        vk: o.vk,
    };
}
function fromClientIvcVerify(o) {
    if (o.proof === undefined) {
        throw new Error("Expected proof in ClientIvcVerify serialization");
    }
    if (o.vk === undefined) {
        throw new Error("Expected vk in ClientIvcVerify serialization");
    }
    ;
    return {
        proof: fromClientIVCProof(o.proof),
        vk: o.vk,
    };
}
function toClientIvcVerifyResponse(o) {
    if (o.valid === undefined) {
        throw new Error("Expected valid in ClientIvcVerifyResponse deserialization");
    }
    ;
    return {
        valid: o.valid,
    };
}
function fromClientIvcVerifyResponse(o) {
    if (o.valid === undefined) {
        throw new Error("Expected valid in ClientIvcVerifyResponse serialization");
    }
    ;
    return {
        valid: o.valid,
    };
}
function toECCVMProof(o) {
    if (o.pre_ipa_proof === undefined) {
        throw new Error("Expected pre_ipa_proof in ECCVMProof deserialization");
    }
    if (o.ipa_proof === undefined) {
        throw new Error("Expected ipa_proof in ECCVMProof deserialization");
    }
    ;
    return {
        preIpaProof: o.pre_ipa_proof.map((v) => v),
        ipaProof: o.ipa_proof.map((v) => v),
    };
}
function fromECCVMProof(o) {
    if (o.preIpaProof === undefined) {
        throw new Error("Expected preIpaProof in ECCVMProof serialization");
    }
    if (o.ipaProof === undefined) {
        throw new Error("Expected ipaProof in ECCVMProof serialization");
    }
    ;
    return {
        pre_ipa_proof: o.preIpaProof.map((v) => v),
        ipa_proof: o.ipaProof.map((v) => v),
    };
}
function toGoblinProof(o) {
    if (o.merge_proof === undefined) {
        throw new Error("Expected merge_proof in GoblinProof deserialization");
    }
    if (o.eccvm_proof === undefined) {
        throw new Error("Expected eccvm_proof in GoblinProof deserialization");
    }
    if (o.translator_proof === undefined) {
        throw new Error("Expected translator_proof in GoblinProof deserialization");
    }
    ;
    return {
        mergeProof: o.merge_proof.map((v) => v),
        eccvmProof: toECCVMProof(o.eccvm_proof),
        translatorProof: o.translator_proof.map((v) => v),
    };
}
function fromGoblinProof(o) {
    if (o.mergeProof === undefined) {
        throw new Error("Expected mergeProof in GoblinProof serialization");
    }
    if (o.eccvmProof === undefined) {
        throw new Error("Expected eccvmProof in GoblinProof serialization");
    }
    if (o.translatorProof === undefined) {
        throw new Error("Expected translatorProof in GoblinProof serialization");
    }
    ;
    return {
        merge_proof: o.mergeProof.map((v) => v),
        eccvm_proof: fromECCVMProof(o.eccvmProof),
        translator_proof: o.translatorProof.map((v) => v),
    };
}
function toProofSystemSettings(o) {
    if (o.ipa_accumulation === undefined) {
        throw new Error("Expected ipa_accumulation in ProofSystemSettings deserialization");
    }
    if (o.oracle_hash_type === undefined) {
        throw new Error("Expected oracle_hash_type in ProofSystemSettings deserialization");
    }
    if (o.disable_zk === undefined) {
        throw new Error("Expected disable_zk in ProofSystemSettings deserialization");
    }
    if (o.optimized_solidity_verifier === undefined) {
        throw new Error("Expected optimized_solidity_verifier in ProofSystemSettings deserialization");
    }
    ;
    return {
        ipaAccumulation: o.ipa_accumulation,
        oracleHashType: o.oracle_hash_type,
        disableZk: o.disable_zk,
        optimizedSolidityVerifier: o.optimized_solidity_verifier,
    };
}
function fromProofSystemSettings(o) {
    if (o.ipaAccumulation === undefined) {
        throw new Error("Expected ipaAccumulation in ProofSystemSettings serialization");
    }
    if (o.oracleHashType === undefined) {
        throw new Error("Expected oracleHashType in ProofSystemSettings serialization");
    }
    if (o.disableZk === undefined) {
        throw new Error("Expected disableZk in ProofSystemSettings serialization");
    }
    if (o.optimizedSolidityVerifier === undefined) {
        throw new Error("Expected optimizedSolidityVerifier in ProofSystemSettings serialization");
    }
    ;
    return {
        ipa_accumulation: o.ipaAccumulation,
        oracle_hash_type: o.oracleHashType,
        disable_zk: o.disableZk,
        optimized_solidity_verifier: o.optimizedSolidityVerifier,
    };
}
function toVkAsFields(o) {
    if (o.verification_key === undefined) {
        throw new Error("Expected verification_key in VkAsFields deserialization");
    }
    ;
    return {
        verificationKey: o.verification_key,
    };
}
function fromVkAsFields(o) {
    if (o.verificationKey === undefined) {
        throw new Error("Expected verificationKey in VkAsFields serialization");
    }
    ;
    return {
        verification_key: o.verificationKey,
    };
}
function toVkAsFieldsResponse(o) {
    if (o.fields === undefined) {
        throw new Error("Expected fields in VkAsFieldsResponse deserialization");
    }
    ;
    return {
        fields: o.fields.map((v) => v),
    };
}
function fromVkAsFieldsResponse(o) {
    if (o.fields === undefined) {
        throw new Error("Expected fields in VkAsFieldsResponse serialization");
    }
    ;
    return {
        fields: o.fields.map((v) => v),
    };
}
//# sourceMappingURL=data:application/json;base64,