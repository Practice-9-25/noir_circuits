"use strict";
// AUTOGENERATED FILE - DO NOT EDIT
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncApi = void 0;
const msgpackr_1 = require("msgpackr");
const api_types_js_1 = require("./api_types.js");
async function msgpackCall(wasm, cbind, input) { const inputBuffer = new msgpackr_1.Encoder({ useRecords: false }).pack(input); const encodedResult = await wasm.cbindCall(cbind, inputBuffer); return new msgpackr_1.Decoder({ useRecords: false }).unpack(encodedResult); }
class AsyncApi {
    constructor(wasm) {
        this.wasm = wasm;
    }
    circuitProve(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitProve)(command);
        return msgpackCall(this.wasm, 'bbapi', [["CircuitProve", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'CircuitProveResponse') {
                throw new Error(`Expected variant name 'CircuitProveResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitProveResponse)(result);
        });
    }
    circuitComputeVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitComputeVk)(command);
        return msgpackCall(this.wasm, 'bbapi', [["CircuitComputeVk", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'CircuitComputeVkResponse') {
                throw new Error(`Expected variant name 'CircuitComputeVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitComputeVkResponse)(result);
        });
    }
    circuitStats(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitStats)(command);
        return msgpackCall(this.wasm, 'bbapi', [["CircuitStats", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'CircuitInfoResponse') {
                throw new Error(`Expected variant name 'CircuitInfoResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitInfoResponse)(result);
        });
    }
    circuitVerify(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitVerify)(command);
        return msgpackCall(this.wasm, 'bbapi', [["CircuitVerify", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'CircuitVerifyResponse') {
                throw new Error(`Expected variant name 'CircuitVerifyResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitVerifyResponse)(result);
        });
    }
    clientIvcComputeStandaloneVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcComputeStandaloneVk)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcComputeStandaloneVk", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcComputeStandaloneVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcComputeStandaloneVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcComputeStandaloneVkResponse)(result);
        });
    }
    clientIvcComputeIvcVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcComputeIvcVk)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcComputeIvcVk", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcComputeIvcVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcComputeIvcVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcComputeIvcVkResponse)(result);
        });
    }
    clientIvcStart(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcStart)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcStart", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcStartResponse') {
                throw new Error(`Expected variant name 'ClientIvcStartResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcStartResponse)(result);
        });
    }
    clientIvcLoad(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcLoad)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcLoad", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcLoadResponse') {
                throw new Error(`Expected variant name 'ClientIvcLoadResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcLoadResponse)(result);
        });
    }
    clientIvcAccumulate(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcAccumulate)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcAccumulate", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcAccumulateResponse') {
                throw new Error(`Expected variant name 'ClientIvcAccumulateResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcAccumulateResponse)(result);
        });
    }
    clientIvcProve(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcProve)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcProve", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcProveResponse') {
                throw new Error(`Expected variant name 'ClientIvcProveResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcProveResponse)(result);
        });
    }
    clientIvcVerify(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcVerify)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcVerify", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcVerifyResponse') {
                throw new Error(`Expected variant name 'ClientIvcVerifyResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcVerifyResponse)(result);
        });
    }
    vkAsFields(command) {
        const msgpackCommand = (0, api_types_js_1.fromVkAsFields)(command);
        return msgpackCall(this.wasm, 'bbapi', [["VkAsFields", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'VkAsFieldsResponse') {
                throw new Error(`Expected variant name 'VkAsFieldsResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toVkAsFieldsResponse)(result);
        });
    }
    circuitWriteSolidityVerifier(command) {
        const msgpackCommand = (0, api_types_js_1.fromCircuitWriteSolidityVerifier)(command);
        return msgpackCall(this.wasm, 'bbapi', [["CircuitWriteSolidityVerifier", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'CircuitWriteSolidityVerifierResponse') {
                throw new Error(`Expected variant name 'CircuitWriteSolidityVerifierResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toCircuitWriteSolidityVerifierResponse)(result);
        });
    }
    clientIvcCheckPrecomputedVk(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcCheckPrecomputedVk)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcCheckPrecomputedVk", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcCheckPrecomputedVkResponse') {
                throw new Error(`Expected variant name 'ClientIvcCheckPrecomputedVkResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcCheckPrecomputedVkResponse)(result);
        });
    }
    clientIvcStats(command) {
        const msgpackCommand = (0, api_types_js_1.fromClientIvcStats)(command);
        return msgpackCall(this.wasm, 'bbapi', [["ClientIvcStats", msgpackCommand]]).then(([variantName, result]) => {
            if (variantName !== 'ClientIvcStatsResponse') {
                throw new Error(`Expected variant name 'ClientIvcStatsResponse' but got '${variantName}'`);
            }
            return (0, api_types_js_1.toClientIvcStatsResponse)(result);
        });
    }
    destroy() {
        return this.wasm.destroy();
    }
}
exports.AsyncApi = AsyncApi;
//# sourceMappingURL=data:application/json;base64,