"use strict";
/**
 * Generate TypeScript bindings from msgpack schema
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const child_process_1 = require("child_process");
const util_1 = require("util");
const url_1 = require("url");
const schema_compiler_js_1 = require("./schema_compiler.js");
const execAsync = (0, util_1.promisify)(child_process_1.exec);
const GENERATORS = [
    {
        name: 'Shared types',
        outputFile: 'generated/api_types.ts',
        createCompiler: schema_compiler_js_1.createSharedTypesCompiler,
    },
    {
        name: 'Sync API',
        outputFile: 'generated/sync.ts',
        createCompiler: schema_compiler_js_1.createSyncApiCompiler,
    },
    {
        name: 'Async API',
        outputFile: 'generated/async.ts',
        createCompiler: schema_compiler_js_1.createAsyncApiCompiler,
    },
    {
        name: 'Native API',
        outputFile: 'generated/native.ts',
        createCompiler: schema_compiler_js_1.createNativeApiCompiler,
    },
];
// @ts-ignore
const __dirname = (0, path_1.dirname)((0, url_1.fileURLToPath)(""));
async function generate() {
    const bbBuildPath = process.env.BB_BINARY_PATH || (0, path_1.join)(__dirname, '../../../cpp/build/bin/bb');
    // Get schema from bb
    console.log('Fetching msgpack schema from bb...');
    const { stdout } = await execAsync(`${bbBuildPath} msgpack schema`);
    const schema = JSON.parse(stdout.trim());
    if (!schema.commands || !schema.responses) {
        throw new Error('Invalid schema: missing commands or responses');
    }
    console.log('Generating TypeScript bindings...\n');
    // Ensure output directory exists
    const outputDir = (0, path_1.join)(__dirname, 'generated');
    (0, fs_1.mkdirSync)(outputDir, { recursive: true });
    // Generate each output file
    for (const config of GENERATORS) {
        const compiler = config.createCompiler();
        compiler.processApiSchema(schema.commands, schema.responses);
        const outputPath = (0, path_1.join)(__dirname, config.outputFile);
        const content = compiler.compile();
        (0, fs_1.writeFileSync)(outputPath, content);
        console.log(`âœ“ ${config.name}: ${outputPath}`);
    }
    console.log('\nGeneration complete!');
}
// Run the generator
generate().catch(error => {
    console.error('Generation failed:', error);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2JpbmQvZ2VuZXJhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILDJCQUE4QztBQUM5QywrQkFBcUM7QUFDckMsaURBQXFDO0FBQ3JDLCtCQUFpQztBQUNqQyw2QkFBb0M7QUFDcEMsNkRBTThCO0FBRTlCLE1BQU0sU0FBUyxHQUFHLElBQUEsZ0JBQVMsRUFBQyxvQkFBSSxDQUFDLENBQUM7QUFRbEMsTUFBTSxVQUFVLEdBQXNCO0lBQ3BDO1FBQ0UsSUFBSSxFQUFFLGNBQWM7UUFDcEIsVUFBVSxFQUFFLHdCQUF3QjtRQUNwQyxjQUFjLEVBQUUsOENBQXlCO0tBQzFDO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsVUFBVTtRQUNoQixVQUFVLEVBQUUsbUJBQW1CO1FBQy9CLGNBQWMsRUFBRSwwQ0FBcUI7S0FDdEM7SUFDRDtRQUNFLElBQUksRUFBRSxXQUFXO1FBQ2pCLFVBQVUsRUFBRSxvQkFBb0I7UUFDaEMsY0FBYyxFQUFFLDJDQUFzQjtLQUN2QztJQUNEO1FBQ0UsSUFBSSxFQUFFLFlBQVk7UUFDbEIsVUFBVSxFQUFFLHFCQUFxQjtRQUNqQyxjQUFjLEVBQUUsNENBQXVCO0tBQ3hDO0NBQ0YsQ0FBQztBQUVGLGFBQWE7QUFDYixNQUFNLFNBQVMsR0FBRyxJQUFBLGNBQU8sRUFBQyxJQUFBLG1CQUFhLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRTFELEtBQUssVUFBVSxRQUFRO0lBQ3JCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBRS9GLHFCQUFxQjtJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDbEQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFFbkQsaUNBQWlDO0lBQ2pDLE1BQU0sU0FBUyxHQUFHLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvQyxJQUFBLGNBQVMsRUFBQyxTQUFTLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUxQyw0QkFBNEI7SUFDNUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNoQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDekMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTdELE1BQU0sVUFBVSxHQUFHLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25DLElBQUEsa0JBQWEsRUFBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxvQkFBb0I7QUFDcEIsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FBQyJ9